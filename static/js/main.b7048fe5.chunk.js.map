{"version":3,"sources":["components/movieCard.js","config.js","components/searchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","config","api_key","process","SearchMovies","useState","query","setQuery","movies","setMovies","onSubmit","e","a","async","preventDefault","url","fetch","res","json","data","results","console","log","message","htmlFor","aria-label","type","name","placeholder","value","onChange","target","filter","map","key","id","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b7048fe5.chunk.js","sourcesContent":["import React from 'react';\n\nexport const MovieCard = ({ movie }) => {\n  return (\n    <>\n      <div className='card'>\n        <img\n          className='card--image'\n          src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n          alt={movie.title + ' poster'}\n        />\n        <div className='card--content'>\n          <h3 className='card--title'>{movie.title}</h3>\n          <p>\n            <small>RELEASE DATE: {movie.release_date}</small>\n          </p>\n          <p>\n            <small>RATING: {movie.vote_average}</small>\n          </p>\n          <p className='card--desc'>{movie.overview}</p>\n        </div>\n      </div>\n    </>\n  );\n};\n","const config = {\n  api_key: process.env.REACT_APP_API_KEY,\n};\n\nexport default config","import React, { useState } from 'react';\nimport { MovieCard } from './movieCard';\nimport config from '../config';\n\nconst SearchMovies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const searchMovies = async (e) => {\n    const { api_key } = config;\n\n    e.preventDefault();\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${api_key}&language=en-US&query=${query}&page=1&include_adult=false`;\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.log(err, err.message);\n    }\n  };\n\n  const onSearchChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <>\n      <form className='form' onSubmit={searchMovies}>\n        <label htmlFor='query' className='label'>\n          Movie Name\n        </label>\n        <input\n          aria-label='Search for blockbuster movies'\n          type='text'\n          className='input'\n          name='query'\n          placeholder='i.e. Jurassic Park'\n          value={query}\n          onChange={onSearchChange}\n        />\n        <button className='button' type='submit'>\n          Search\n        </button>\n      </form>\n      <div className='card-list'>\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default SearchMovies;\n","import React from 'react';\nimport SearchMovies from './components/searchMovies'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">The Movie Database Search</h1>\n      <SearchMovies />\n\n      <footer>\n        <p>&copy; 2020 | With &hearts; from Teri 'codegod' Eyenike</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}